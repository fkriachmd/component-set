name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Add .nojekyll file
        run: touch ./dist/.nojekyll

      - name: Fix script tags for GitHub Pages compatibility
        run: |
          # Remove type="module" from script tags since we're using IIFE format
          sed -i 's/type="module"[[:space:]]*//g' ./dist/index.html

          # Clean up any extra spaces
          sed -i 's/<script[[:space:]]\+crossorigin/<script crossorigin/g' ./dist/index.html

          # Verify the changes
          echo "=== HTML content after modification ==="
          cat ./dist/index.html | grep -A 3 -B 3 "script.*src"

          echo "=== JavaScript file details ==="
          ls -la ./dist/assets/*.js

          echo "=== JavaScript file beginning ==="
          head -c 200 ./dist/assets/*.js

      - name: Setup GitHub Pages configuration
        run: |
          # Create .htaccess for Apache servers
          cat > ./dist/.htaccess << 'EOF'
          AddType text/javascript .js
          AddType text/css .css
          AddType application/json .json
          AddType image/svg+xml .svg

          # Fallback for SPA routing
          RewriteEngine On
          RewriteBase /
          RewriteRule ^index\.html$ - [L]
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.html [L]
          EOF

          # Create _headers for Netlify/Vercel compatibility
          cat > ./dist/_headers << 'EOF'
          /*.js
            Content-Type: text/javascript
          /*.css
            Content-Type: text/css
          /*.json
            Content-Type: application/json
          /*.svg
            Content-Type: image/svg+xml
          EOF

          # Create web.config for IIS servers
          cat > ./dist/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <staticContent>
                <remove fileExtension=".js" />
                <remove fileExtension=".css" />
                <remove fileExtension=".json" />
                <remove fileExtension=".svg" />
                <mimeMap fileExtension=".js" mimeType="text/javascript" />
                <mimeMap fileExtension=".css" mimeType="text/css" />
                <mimeMap fileExtension=".json" mimeType="application/json" />
                <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
              </staticContent>
              <rewrite>
                <rules>
                  <rule name="React Routes" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAll">
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                      <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="/" />
                  </rule>
                </rules>
              </rewrite>
            </system.webServer>
          </configuration>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
